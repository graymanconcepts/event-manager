---
import Layout from '../../layouts/Layout.astro';
import TalkCard from '../../components/TalkCard';
import { API_CONFIG } from '../../utils/api/config';
import type { Speaker, Talk } from '../../utils/api/types';

const { id } = Astro.params;

// Add a guard clause to handle undefined id
if (!id) {
  return Astro.redirect('/speakers');
}

let speaker: Speaker | null = null;
let speakerTalks: Talk[] = [];
let error: string | null = null;

try {
  // Fetch speaker details
  const speakerResponse = await fetch(
    `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.speakers.get(parseInt(id))}?public=true`,
    { headers: API_CONFIG.defaultHeaders }
  );

  if (!speakerResponse.ok) {
    throw new Error('Failed to fetch speaker details');
  }

  speaker = await speakerResponse.json();

  // Fetch all talks to filter for this speaker's talks
  const talksResponse = await fetch(
    `${API_CONFIG.baseUrl}${API_CONFIG.endpoints.talks.list}?public=true`,
    { headers: API_CONFIG.defaultHeaders }
  );

  if (!talksResponse.ok) {
    throw new Error('Failed to fetch talks');
  }

  const allTalks: Talk[] = await talksResponse.json();
  speakerTalks = allTalks.filter(talk => talk.speaker_id === parseInt(id));

} catch (err) {
  console.error('Error fetching data:', err);
  error = 'Failed to load speaker details. Please try again later.';
}
---

<Layout title={speaker ? `${speaker.name} - Speaker Profile` : 'Speaker Profile'}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    {error && (
      <div class="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 p-4 rounded-lg mb-8 text-center">
        {error}
      </div>
    )}

    {speaker && (
      <div class="space-y-8">
        <!-- Speaker Profile -->
        <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
          <div class="p-6">
            <div class="flex flex-col md:flex-row gap-8">
              {speaker.image_url && (
                <div class="w-full md:w-1/3">
                  <img
                    src={speaker.image_url}
                    alt={speaker.name}
                    class="w-full h-auto rounded-lg shadow-md"
                  />
                </div>
              )}
              <div class="flex-1">
                <h1 class="text-4xl font-bold mb-4 text-gray-900 dark:text-white">
                  {speaker.name}
                </h1>
                {speaker.company && (
                  <p class="text-xl text-gray-600 dark:text-gray-400 mb-4">
                    {speaker.company}
                  </p>
                )}
                <div class="prose dark:prose-invert max-w-none">
                  <p class="text-gray-700 dark:text-gray-300">
                    {speaker.bio}
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Speaker's Talks -->
        {speakerTalks.length > 0 && (
          <div>
            <h2 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">
              Talks by {speaker.name}
            </h2>
            <div class="space-y-6">
              {speakerTalks.map(talk => (
                <TalkCard 
                  talk={talk}
                  speaker={speaker}
                  client:load
                />
              ))}
            </div>
          </div>
        )}

        {speakerTalks.length === 0 && (
          <div class="text-center text-gray-600 dark:text-gray-400">
            <p>No talks scheduled for this speaker yet.</p>
          </div>
        )}
      </div>
    )}

    {!error && !speaker && (
      <div class="text-center text-gray-600 dark:text-gray-400">
        <p>Speaker not found.</p>
      </div>
    )}

    <div class="mt-8">
      <button
        onclick="history.back()"
        class="inline-block bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-300 font-medium px-4 py-2 rounded-lg transition-colors"
      >
        ← Back
      </button>
    </div>
  </div>
</Layout>
