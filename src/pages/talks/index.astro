---
import Layout from '../../layouts/Layout.astro';
import TalkCard from '../../components/TalkCard';
import { API_CONFIG } from '../../utils/api/config';
import type { Talk, Speaker } from '../../utils/api/types';

let talks: Talk[] = [];
let speakers: Speaker[] = [];
let error: string | null = null;

try {
  // Fetch talks with speaker information
  const response = await fetch(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.talks.list}?public=true`, {
    headers: API_CONFIG.defaultHeaders
  });
  
  if (!response.ok) {
    throw new Error('Failed to fetch talks');
  }
  
  talks = await response.json();

  // Fetch speakers to get their details
  const speakersResponse = await fetch(`${API_CONFIG.baseUrl}${API_CONFIG.endpoints.speakers.list}?public=true`, {
    headers: API_CONFIG.defaultHeaders
  });
  
  if (!speakersResponse.ok) {
    throw new Error('Failed to fetch speakers');
  }
  
  speakers = await speakersResponse.json();
} catch (err) {
  console.error('Error fetching data:', err);
  error = 'Failed to load talks. Please try again later.';
}

// Create a map of speaker IDs to speaker objects for easy lookup
const speakersMap = Array.isArray(speakers) ? speakers.reduce((acc, speaker) => {
  acc[speaker.id] = speaker;
  return acc;
}, {}) : {};
---

<Layout title="Conference Talks">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1 class="text-4xl font-bold mb-8">Conference Talks</h1>
    
    {error && (
      <div class="bg-red-100 dark:bg-red-900/30 text-red-700 dark:text-red-300 p-4 rounded-lg mb-8 text-center">
        {error}
      </div>
    )}
    
    {!error && (!Array.isArray(talks) || talks.length === 0) && (
      <div class="text-center text-gray-600 dark:text-gray-400">
        <p>No talks have been announced yet. Check back soon!</p>
      </div>
    )}
    
    <div class="grid gap-6">
      {Array.isArray(talks) && talks.map(talk => (
        <TalkCard 
          talk={talk} 
          speaker={talk.speaker_id ? speakersMap[talk.speaker_id] : undefined}
          client:load
        />
      ))}
    </div>
  </div>
</Layout>
